{
  "author": "",
  "category": "",
  "extensionNamespace": "",
  "fullName": "",
  "gdevelopVersion": "",
  "helpPath": "",
  "iconUrl": "",
  "name": "ContinuousSnake",
  "previewIconUrl": "",
  "shortDescription": "",
  "version": "",
  "description": "",
  "tags": [],
  "authorIds": [],
  "dependencies": [],
  "globalVariables": [],
  "sceneVariables": [],
  "eventsFunctions": [],
  "eventsBasedBehaviors": [
    {
      "description": "",
      "fullName": "",
      "name": "SnakeHead",
      "objectType": "",
      "eventsFunctions": [
        {
          "fullName": "Move Snake",
          "functionType": "Action",
          "name": "UpdateSegments",
          "sentence": "Move the snake starting with _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": []
            },
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "let { segments, positionHistory } = behavior._snake;",
                "const spacing = behavior._getSpacing();",
                "",
                "let totalDist = 0;",
                "let lastDist = 0;",
                "const lastPos = positionHistory[positionHistory.length-1];",
                "const pos = { x: object.getCenterXInScene(), y: object.getCenterYInScene() };",
                "if (!lastPos || lastPos.x !== pos.x || lastPos.y !== pos.y) {",
                "    positionHistory.push(pos);",
                "}",
                "let posIdx = positionHistory.length - 2;",
                "let p = positionHistory[posIdx];",
                "let lastP = positionHistory[posIdx + 1];",
                "for (let i = 0; i < segments.length; i++) {",
                "    /** @type {gdjs.SpriteRuntimeObject} */",
                "    const segment = segments[i];",
                "    const targetDistance = spacing * (i + 1)",
                "    while (posIdx >= 0 && totalDist < targetDistance) {",
                "        lastP = positionHistory[posIdx + 1]",
                "        lastDist = totalDist;",
                "        p = positionHistory[posIdx];",
                "        totalDist += Math.hypot(p.x - lastP.x, p.y - lastP.y);",
                "        posIdx--;",
                "    }",
                "",
                "    if (totalDist >= targetDistance && posIdx >= -1) {",
                "        // lerp between last 2 points to get exact spacing",
                "        const lerpA = (targetDistance - lastDist) / (totalDist - lastDist);",
                "        const lerpB = 1 - lerpA;",
                "        segment.setCenterPositionInScene(",
                "            lastP.x * lerpB + p.x * lerpA,",
                "            lastP.y * lerpB + p.y * lerpA",
                "        );",
                "    } else {",
                "        //console.log(\"fallback:\", totalDist);",
                "        const lastSegment = segments[i - 1] || object;",
                "        const dx = positionHistory[0].x - positionHistory[1].x;",
                "        const dy = positionHistory[0].y - positionHistory[1].y;",
                "        const len = Math.hypot(dx, dy);",
                "        const x = positionHistory[0].x + (dx * spacing / len);",
                "        const y = positionHistory[0].y + (dy * spacing / len);",
                "        segment.setCenterPositionInScene(x, y);",
                "        positionHistory.unshift({",
                "            x: x,",
                "            y: y,",
                "        })",
                "    }",
                "}",
                "if (positionHistory.length - posIdx >= 2 && posIdx > 0) {",
                "    behavior._snake.positionHistory = positionHistory.slice(posIdx);",
                "}"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Action",
          "name": "onCreated",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": []
            },
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "behavior._snake = behavior._snake || {",
                "    positionHistory: [],",
                "    segments: [],",
                "};"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Add an object to the snake",
          "fullName": "Add Segment",
          "functionType": "Action",
          "name": "AddSegment",
          "sentence": "add _PARAM2_ to the snake with head _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "const data = object.getBehavior(behaviorName)._snake;",
                "const segs = eventsFunctionContext.getObjects(\"Segment\");",
                "for (let segment of segs) {",
                "    data.segments.push(segment);",
                "}"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            },
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "value": "ContinuousSnake::SnakeHead::UpdateSegments"
                  },
                  "parameters": [
                    "Object",
                    "Behavior",
                    ""
                  ]
                }
              ]
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "Segment",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "",
              "name": "segbehavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Condition",
          "name": "IsCollidingWithTail",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "",
                "let { segments } = behavior._snake;",
                " /** @type {gdjs.SpriteRuntimeObject} */",
                "const target = eventsFunctionContext.getObjects(\"target\")[0];",
                "for(let seg of segments){",
                "    if(seg!==target && target.getDistanceToObject(seg) < 10){",
                "        return true;",
                "    }",
                "}",
                ""
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "target",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Action",
          "name": "doStepPreEvents",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const data = object.getBehavior(behaviorName)._snake;",
                "const lastPos = data.positionHistory[data.positionHistory.length-1];",
                "const pos = {x:object.getCenterXInScene(), y:object.getCenterYInScene()};",
                "if (!lastPos || lastPos.x !== pos.x || lastPos.y !== pos.y) {",
                "    data.positionHistory.push(pos);",
                "}"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if the given object is in this snake.",
          "fullName": "Snake Contains Segment",
          "functionType": "Condition",
          "name": "SnakeContainsSegment",
          "sentence": "check if _PARAM2_ is in the snake attached to _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "",
                "let { segments } = behavior._snake;",
                "const segment = eventsFunctionContext.getObjects(\"Segment\")[0];",
                "eventsFunctionContext.returnValue = segments.includes(segment);",
                ""
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "Segment",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "The length of the snake",
          "fullName": "Length",
          "functionType": "Expression",
          "name": "Length",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const data = object.getBehavior(behaviorName)._snake;",
                "",
                "eventsFunctionContext.returnValue = data.segments.length;"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "expressionType": {
            "type": "expression"
          },
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "Remove a Segment",
          "functionType": "Action",
          "name": "RemoveSegment",
          "sentence": "remove _PARAM2_ from the snake with head _PARAM0_",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const data = object.getBehavior(behaviorName)._snake;",
                "",
                "const toRemove = eventsFunctionContext.getObjects(\"Segment\");",
                "for(let seg of toRemove){",
                "    const index = data.segments.indexOf(seg);",
                "    if(index >= 0){",
                "        data.segments.splice(index, 1);",
                "    }",
                "}",
                "",
                ""
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "Segment",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [
        {
          "value": "",
          "type": "Number",
          "unit": "Pixel",
          "label": "spacing between segments",
          "description": "",
          "group": "",
          "extraInformation": [],
          "name": "Spacing"
        }
      ],
      "sharedPropertyDescriptors": []
    },
    {
      "description": "",
      "fullName": "",
      "name": "Segment",
      "objectType": "Sprite",
      "eventsFunctions": [
        {
          "fullName": "",
          "functionType": "Action",
          "name": "onCreated",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": []
            },
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const segment = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = segment.getBehavior(behaviorName);",
                "",
                "behavior._segment = {",
                "    shading: [\"Solid\", \"Shaded\", \"Empty\"][Math.floor(Math.random()*3)],",
                "    color:   [\"Blue\", \"Red\", \"Green\"][Math.floor(Math.random()*3)],",
                "    shape: [\"Circle\", \"Square\", \"Star\"][Math.floor(Math.random()*3)]",
                "};",
                "",
                "const props = behavior._segment;",
                "segment.setAnimationName(props.shading + props.color + props.shape);",
                ""
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Condition",
          "name": "IsUnhappy",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const meSegment = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "",
                "const snake = eventsFunctionContext.getObjects(\"Snake\")[0];",
                "if(!snake) return false;",
                "const snakeBName = eventsFunctionContext.getBehaviorName(\"snakehead\");",
                "const others = snake.getBehavior(snakeBName)._snake.segments;",
                "console.log(others.length);",
                "",
                "let happiness = 0;",
                "const me = meSegment.getBehavior(behaviorName)._segment;",
                "for(const otherSegment of others){",
                "    const other = otherSegment.getBehavior(behaviorName)._segment;",
                "    if(me === other) continue;",
                "    for(const key in me){",
                "        happiness += (me[key] == other[key]) ? 1 : -0.5;",
                "    }",
                "}",
                "happiness/=others.length;",
                "eventsFunctionContext.returnValue = happiness<eventsFunctionContext.getArgument(\"threshold\");"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "Snake",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "",
              "name": "snakehead",
              "supplementaryInformation": "ContinuousSnake::SnakeHead",
              "type": "behavior"
            },
            {
              "description": "how bad does it have to be? >0 is happier, <0 is sadder",
              "name": "threshold",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Action",
          "name": "test",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "const meSegment = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const otherBehaviorName = eventsFunctionContext.getBehaviorName(\"OtherBehavior\");",
                "",
                "const others = eventsFunctionContext.getObjects(\"Others\");",
                "let happiness = 0;",
                "const me = meSegment.getBehavior(behaviorName)._segment;",
                "for(const otherSegment of others){",
                "    const other = otherSegment.getBehavior(otherBehaviorName)._segment;",
                "    if(me === other) continue;",
                "    for(const key in me){",
                "        happiness += (me[key] == other[key]) ? 1 : -0.5;",
                "    }",
                "}",
                "console.log(JSON.stringify(me));",
                "console.log(happiness);"
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            },
            {
              "description": "",
              "name": "Others",
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "description": "",
              "name": "OtherBehavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        },
        {
          "fullName": "",
          "functionType": "Action",
          "name": "UpdateSprite",
          "sentence": "",
          "events": [
            {
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": [
                "/**@type {gdjs.SpriteRuntimeObject} */",
                "let segment = objects[0];",
                "const object = objects[0];",
                "const behaviorName = eventsFunctionContext.getBehaviorName(\"Behavior\");",
                "const behavior = object.getBehavior(behaviorName);",
                "const props = behavior._segment;",
                "",
                "segment.setAnimationName(props.shading + props.color + props.shape);",
                ""
              ],
              "parameterObjects": "Object",
              "useStrict": true,
              "eventsSheetExpanded": true
            }
          ],
          "parameters": [
            {
              "description": "Object",
              "name": "Object",
              "supplementaryInformation": "Sprite",
              "type": "object"
            },
            {
              "description": "Behavior",
              "name": "Behavior",
              "supplementaryInformation": "ContinuousSnake::Segment",
              "type": "behavior"
            }
          ],
          "objectGroups": []
        }
      ],
      "propertyDescriptors": [],
      "sharedPropertyDescriptors": []
    }
  ],
  "eventsBasedObjects": []
}